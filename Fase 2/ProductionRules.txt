Init -> Program
Program -> Decl Program
Program -> Decl
Decl -> Type ident ;
Decl -> void ident ( Formals ) StmtBlock
Decl -> Type ident ( Formals ) StmtBlock
Decl -> const ConstType ident ;
Decl -> class ident Heritage { FieldX }
Decl -> interface ident { PrototypeS }
ConstType -> int
ConstType -> double
ConstType -> bool
ConstType -> string
Type -> ConstType
Type -> ident
Type -> Type []
Heritage -> : ident HeritageP
Heritage -> ~
HeritageP -> , ident HeritageP
HeritageP -> ~		 
Formals -> Type ident , Formals
Formals -> Type ident
FieldX -> Field FieldX
FieldX -> ~  
Field -> Type ident ;
Field -> void ident ( Formals ) StmtBlock
Field -> Type ident ( Formals ) StmtBlock
Field -> const ConstType ident ;
PrototypeS -> Prototype PrototypeS
PrototypeS -> ~
Prototype -> void ident ( Formals ) ;
Prototype -> Type ident ( Formals ) ;
StmtBlock -> { VariableDecl ConstDecl StmtX }
VariableDecl -> Type ident ; VariableDecl
VariableDecl -> ~
ConstDecl -> const ConstType ident ; ConstDecl
ConstDecl -> ~
StmtX -> Stmt StmtX
StmtX -> ~
Stmt -> Expr ; 
Stmt -> ;
Stmt -> if ( Expr ) Stmt ElseStmt
Stmt -> while ( Expr ) Stmt
Stmt -> for ( Expr ; Expr ; Expr ) Stmt
Stmt -> break ;
Stmt -> return Expr ;
Stmt -> Console . Writeline ( ExprX ) ;
Stmt -> StmtBlock
ElseStmt -> else Stmt
ElseStmt -> ~
ExprX -> Expr , ExprX
ExprX -> Expr
Expr -> ident = A
Expr -> A
A -> B AX
AX -> == B AX
AX -> ~
B -> B && C
B -> C
C -> C < D
C -> C <= D
C -> D
D -> D + E
D -> E
E -> E * F
E -> E % F
E -> F
F -> - G
F -> ! G
F -> G
G -> G . ident = Expr
G -> G . ident
G -> H
H -> ( Expr )
H -> this
H -> ident
H -> New ( ident )
H -> T_intconst
H -> T_doubleconst
H -> T_boolconst
H -> T_stringconst
H -> null