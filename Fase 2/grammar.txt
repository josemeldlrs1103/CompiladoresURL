INIT	        →	PROGRAM
PROGRAM	        →	DECL PROGRAM_PRIME
PROGRAM_PRIME	→	PROGRAM
PROGRAM_PRIME	→	''
DECL	        →	VARIABLE_DECL
DECL	        →	FUNCTION_DECL
DECL	        →	CONST_DECL
DECL	        →	CLASS_DECL
DECL	        →	INTERFACE_DECL
VARIABLE_DECL	→	VARIABLE ;
VARIABLE	    →	TYPE ident
CONST_DECL	    →	const CONST_TYPE ident ;
CONST_TYPE	    →	int
CONST_TYPE	    →	double
CONST_TYPE	    →	bool
CONST_TYPE	    →	string
TYPE	        →	int
TYPE	        →	double
TYPE	        →	bool
TYPE	        →	string
TYPE	        →	ident
TYPE	        →	TYPE []
FUNCTION_DECL	→	TYPE ident ( FORMALS ) STMT_BLOCK
FUNCTION_DECL	→	void ident ( FORMALS ) STMT_BLOCK
FORMALS	        →	VARIABLE , FORMALS
FORMALS	        →	VARIABLE
CLASS_DECL	    →	class ident HERITAGE { FIELD }
HERITAGE	    →	HERITAGE_PRIME
HERITAGE	    →	STMT_BLOCK
HERITAGE_PRIME	→	: ident HERITAGE_PRIME2
HERITAGE_PRIME2	→	, ident HERITAGE_PRIME3
HERITAGE_PRIME2	→	''
HERITAGE_PRIME3	→	HERITAGE_PRIME2
FIELD	        →	VARIABLE_DECL FIELD_PRIME
FIELD	        →	FUNCTION_DECL FIELD_PRIME
FIELD	        →	CONST_DECL FIELD_PRIME
FIELD	        →	''
FIELD_PRIME	    →	FIELD
INTERFACE_DECL	→	interface ident { PROTOTYPE }
PROTOTYPE	    →	TYPE ident ( FORMALS ) ; PROTOTYPE_PRIME
PROTOTYPE	    →	void ident ( FORMALS ) ; PROTOTYPE_PRIME
PROTOTYPE	    →	''
PROTOTYPE_PRIME	→	PROTOTYPE
STMT_BLOCK	    →	{ SBPV SBPC SBPS }
SBPV	        →	VARIABLE_DECL SBPV_PRIME
SBPV	        →	''
SBPV_PRIME	    →	SBPV
SBPC	        →	CONST_DECL SBPC_PRIME
SBPC	        →	''
SBPC_PRIME	    →	SBPC
SBPS	        →	STMT SBPS_PRIME
SBPS	        →	''
SBPS_PRIME	    →	SBPS
STMT	        →	IfStmt
STMT	        →	WhileStmt
STMT	        →	ForStmt
STMT	        →	BreakStmt
STMT	        →	ReturnStmt
STMT	        →	PrintStmt
STMT	        →	''
STMT	        →	Expr ;
STMT	        →	STMT_BLOCK
IfStmt	        →	if ( Expr ) STMT elseStmt
elseStmt	    →	else STMT
elseStmt	    →	''
WhileStmt	    →	while ( Expr ) STMT
ForStmt	        →	for ( Expr ; Expr ; Expr ; ) STMT
ReturnStmt	    →	return Expr ;
BreakStmt	    →	break ;
PrintStmt	    →	Console.Writeline ( Expr PrintStmtPrime ) ;
PrintStmtPrime	→	, Expr PrintStmtPrime
PrintStmtPrime	→	''
Expr	        →	Root
Expr	        →	Load
Root	        →	LValue
Root	        →	CONSTANT
Root	        →	this
Root	        →	New ( ident )
Load	        →	ExprOr LoadPrime
LoadPrime	    →	LValue = Charge
LoadPrime	    →	''
Charge	        →	Root
Charge	        →	ExprOr
ExprOr	        →	ExprAnd ExprOrPrime
ExprOrPrime	    →	|| ExprAnd ExprOrPrime
ExprOrPrime	    →	''
ExprAnd	        →	ExprEquals ExprAndPrime
ExprAndPrime	→	&& ExprEquals ExprAndPrime
ExprAndPrime	→	''
ExprEquals	    →	ExprComp ExprEqualsPrime
ExprEqualsPrime	→	== ExprComp ExprEqualsPrime
ExprEqualsPrime	→	!= ExprComp ExprEqualsPrime
ExprEqualsPrime	→	''
ExprComp	    →	ExprAdd ExprCompPrime
ExprCompPrime	→	> ExprAdd ExprCompPrime
ExprCompPrime	→	< ExprAdd ExprCompPrime
ExprCompPrime	→	>= ExprAdd ExprCompPrime
ExprCompPrime	→	<= ExprAdd ExprCompPrime
ExprCompPrime	→	''
ExprAdd	        →	ExprMul ExprAddPrime
ExprAddPrime	→	+ ExprMul ExprAddPrime
ExprAddPrime	→	- ExprMul ExprAddPrime
ExprAddPrime	→	''
ExprMul	        →	ExprPre ExprMulPrime
ExprMulPrime	→	* ExprPre ExprMulPrime
ExprMulPrime	→	/ ExprPre ExprMulPrime
ExprMulPrime	→	% ExprPre ExprMulPrime
ExprMulPrime	→	''
ExprPre	        →	ExprParen ExprPrePrime
ExprPrePrime	→	- ExprParen ExprPrePrime
ExprPrePrime	→	! ExprParen ExprPrePrime
ExprPrePrime	→	''
ExprParen	    →	( Expr )
ExprParen	    →	''
LValue	        →	ident
LValue	        →	Expr . ident
CONSTANT	    →	intConstant
CONSTANT	    →	doubleConstant
CONSTANT	    →	booleandConstant
CONSTANT	    →	stringConstant
CONSTANT	    →	null