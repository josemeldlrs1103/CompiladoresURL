Start -> Program
Program -> Decl Program
Program -> Decl
Decl -> Type ident ;
Decl -> void ident ( Formals ) StmtBlock
Decl -> Type ident ( Formals ) StmtBlock
Decl -> const TYPEX ident ;
Decl -> class ident Heritage HeritagePrime { FieldX }
Decl -> interface ident { ProtoPre }
TYPEX -> int
TYPEX -> double
TYPEX -> bool
TYPEX -> string
Type -> TYPEX
Type -> ident
Type -> Type []
Formals -> Type ident , Formals
Formals -> Type ident
Heritage -> : ident
Heritage -> ~
HeritagePrime -> , Ident
HeritagePrime -> ~
Ident -> ident , Ident
Ident -> ident
FieldX -> Field FieldX
FieldX -> ~
Field -> Type ident ;
Field -> void ident ( Formals ) StmtBlock
Field -> Type ident ( Formals ) StmtBlock
Field -> const TYPEX ident ;
ProtoPre -> Prototype ProtoPre
ProtoPre -> ~
Prototype -> void ident ( Formals ) ;
Prototype -> Type ident ( Formals ) ;
StmtBlock -> { VariableCommon }
VariableCommon -> VariableDecl VariableCommon
VariableCommon -> ConstDecl VariableCommon
VariableCommon -> StmtX VariableCommon
VariableCommon -> ~
VariableDecl -> Type ident ;
ConstDecl -> const TYPEX ident ;
StmtX -> Stmt
Stmt -> Expr ;
Stmt -> ;
Stmt -> if ( Expr ) Stmt ElseStmt
Stmt -> while ( Expr ) Stmt
Stmt -> for ( Expr ; Expr ; Expr ) Stmt
Stmt -> break ;
Stmt -> return Expr ;
Stmt -> Console . Writeline ( ExprX ) ;
Stmt -> StmtBlock
Stmt -> ident ( Actuals )
Stmt -> ident . ident ( Actuals )
Actuals -> Expr , Actuals
Actuals -> Expr
ElseStmt -> else Stmt
ElseStmt -> ~
ExprX -> Expr , ExprX
ExprX -> Expr
Expr -> ident = A
Expr -> A
A -> B AX
AX -> == B AX
AX -> ~
B -> B && C
B -> C
C -> C < D
C -> C <= D
C -> D
D -> D + E
D -> E
E -> E * F
E -> E % F
E -> F
F -> - G
F -> ! G
F -> G
G -> G . ident = Expr
G -> G . ident
G -> H
H -> ( Expr )
H -> this
H -> ident
H -> New ( ident )
H -> intConst
H -> doubleConst
H -> booleanConst
H -> stringConst
H -> null